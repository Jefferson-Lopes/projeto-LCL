// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/04/2020 08:20:34"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          sistemaDeControle
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module sistemaDeControle_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [3:0] KEY;
reg [9:0] SW;
// wires                                               
wire [7:0] LED;
wire [1:0] debug1;
wire [1:0] debug2;

// assign statements (if any)                          
sistemaDeControle i1 (
// port map - connection between master ports and signals/registers   
	.KEY(KEY),
	.LED(LED),
	.SW(SW),
	.debug1(debug1),
	.debug2(debug2)
);
initial 
begin 
#1000000 $finish;
end 

// KEY[3]
initial
begin
	KEY[3] = 1'b1;
	KEY[3] = #10000 1'b0;
	KEY[3] = #10000 1'b1;
	KEY[3] = #10000 1'b0;
	KEY[3] = #10000 1'b1;
end 

// KEY[2]
initial
begin
	KEY[2] = 1'b1;
	KEY[2] = #50000 1'b0;
	KEY[2] = #10000 1'b1;
end 
// SW[ 9 ]
initial
begin
	SW[9] = 1'b1;
	SW[9] = #60000 1'b0;
end 
// SW[ 8 ]
initial
begin
	SW[8] = 1'b1;
	SW[8] = #10000 1'b0;
end 
// SW[ 7 ]
initial
begin
	SW[7] = 1'b0;
	SW[7] = #20000 1'b1;
	SW[7] = #20000 1'b0;
end 
// SW[ 6 ]
initial
begin
	SW[6] = 1'b0;
end 
// SW[ 5 ]
initial
begin
	SW[5] = 1'b1;
	SW[5] = #10000 1'b0;
end 
// SW[ 4 ]
initial
begin
	SW[4] = 1'b0;
	SW[4] = #20000 1'b1;
	SW[4] = #20000 1'b0;
end 
// SW[ 3 ]
initial
begin
	SW[3] = 1'b0;
end 
// SW[ 2 ]
initial
begin
	SW[2] = 1'b0;
	SW[2] = #20000 1'b1;
	SW[2] = #20000 1'b0;
end 
// SW[ 1 ]
initial
begin
	SW[1] = 1'b1;
	SW[1] = #10000 1'b0;
end 
// SW[ 0 ]
initial
begin
	SW[0] = 1'b1;
	SW[0] = #10000 1'b0;
end 
endmodule

